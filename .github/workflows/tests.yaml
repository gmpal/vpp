name: Run Pytest Suite

on:
  push:
    branches:
      - main # Adjust to your default branch
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    # Define services (like a Docker container) to run alongside the job
    services:
      timescale:
        # Use the TimescaleDB image you specified
        image: timescale/timescaledb-ha:pg17
        env:
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432 # Maps container's port 5432 to host's port 5432
        # Ensure the container is healthy before proceeding
        options: >-
          --name timescale-test
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10" # Replace with your Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov psycopg2-binary pandas  # Add psycopg2 for PostgreSQL connection
          if [ -f ./requirements/requirements.txt ]; then pip install -r ./requirements/requirements.txt; fi

      - name: Wait for TimescaleDB to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for TimescaleDB..."
            sleep 2
          done

      - name: Run tests with coverage
        run: |
          pytest --cov=./ --cov-report=xml --cov-report=term-missing
        env:
          POSTGRES_DB: postgres # Default database name
          POSTGRES_USER: postgres # Default TimescaleDB user
          POSTGRES_PASSWORD: testpass # Matches the service env
          TIMESCALEDB_HOST: localhost # Container is accessible on localhost
          POSTGRES_PORT: 5432 # Matches the mapped port

      - name: Extract coverage percentage
        if: github.ref == 'refs/heads/main'
        run: |
          python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); coverage = float(root.get('line-rate')) * 100; print(f'COVERAGE_PCT={int(coverage)}')" >> $GITHUB_ENV

      - name: Create coverage badge manually
        if: github.ref == 'refs/heads/main'
        run: |
          curl -X PATCH -H "Authorization: token ${{ secrets.GIST_SECRET }}" -d "{\"files\": {\"coverage.json\": {\"content\": \"{\\\"schemaVersion\\\": 1, \\\"label\\\": \\\"Coverage\\\", \\\"message\\\": \\\"${{ env.COVERAGE_PCT }}%\\\", \\\"color\\\": \\\"green\\\"}\"}}}" https://api.github.com/gists/ecfd0b8a247e4da2abafbdc142d7d01b
