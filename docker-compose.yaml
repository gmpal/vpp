version: '3.8'

services:
  # Backend service (always running, exposes port 8000)
  backend:
    build:
      context: .
      dockerfile: docker/dev/backend.Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      - TIMESCALEDB_HOST=${TIMESCALEDB_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - timescaledb
      - kafka
      - mlflow
    volumes:
      - ./backend:/app/backend

  # Frontend service (always running, exposes port 3000 for development)
  frontend:
    build:
      context: .
      dockerfile: docker/dev/frontend.Dockerfile
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_BASE_URL}
    depends_on:
      - backend

  # TimescaleDB service (always running, exposes port 5432)
  timescaledb:
    build:
      context: .
      dockerfile: docker/dev/timescaledb.Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - timescaledb-data:/var/lib/postgresql/data

  # Kafka service (always running, depends on Zookeeper)
  kafka:
    build:
      context: .
      dockerfile:  docker/dev/kafka.Dockerfile
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT}
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"

  # Zookeeper service (always running, exposes port 2181)
  zookeeper:
    build:
      context: .
      dockerfile: docker/dev/zookeeper.Dockerfile
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_CLIENT_PORT}
      - ZOOKEEPER_TICK_TIME=${ZOOKEEPER_TICK_TIME}
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}"

  # MLflow service (always running, exposes port 5000)
  mlflow:
    build:
      context: .
      dockerfile: docker/dev/mlflow.Dockerfile
    environment:
      - MLFLOW_PORT=${MLFLOW_PORT}
    ports:
      - "${MLFLOW_PORT}:${MLFLOW_PORT}"

  # Kafka Consumer service (always running, listens for Kafka messages)
  consumer:
    build:
      context: .
      dockerfile: docker/dev/consumer.Dockerfile
    environment:
      - TIMESCALEDB_HOST=${TIMESCALEDB_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - timescaledb
      - kafka
      - zookeeper
      - backend
    volumes:
      - ./backend:/app/backend

  # DB Initialization service (runs once after all services are up)
  db-init:
    build:
      context: .
      dockerfile: docker/dev/db-init.Dockerfile
    environment:
      - TIMESCALEDB_HOST=${TIMESCALEDB_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - timescaledb
      - kafka
    profiles:
      - init
    volumes:
      - ./backend:/app/backend

  # Inference service (periodic task, not always running)
  inference:
    build:
      context: .
      dockerfile: docker/dev/inference.Dockerfile
    environment:
      - TIMESCALEDB_HOST=${TIMESCALEDB_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
    depends_on:
      - timescaledb
      - mlflow
    profiles:
      - task
    volumes:
      - ./backend:/app/backend


  # Training service (periodic task, not always running)
  training:
    build:
      context: .
      dockerfile: docker/dev/training.Dockerfile
    environment:
      - TIMESCALEDB_HOST=${TIMESCALEDB_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
    depends_on:
      - timescaledb
      - mlflow
    profiles:
      - task
    volumes:
      - ./backend:/app/backend


volumes:
  timescaledb-data: