# version: '3.8'

services:
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  # TimescaleDB
  timescaledb:
    image: timescale/timescaledb-ha:pg17
    container_name: timescaledb
    environment:
      POSTGRES_PASSWORD: postgresso
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data

  # db-init service (runs 01_filldb.py after TimescaleDB is ready)
  db-init:
    build:
      context: ./backend
      dockerfile: db-init.Dockerfile
    container_name: db_init
    depends_on:
      - timescaledb
    # This will exit once 01_filldb.py completes
    restart: "no"

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    depends_on:
      - kafka
      - timescaledb
      - db-init  # So it only starts after DB is initialized
    environment:
      DATABASE_URL: postgres://postgres:postgresso@timescaledb:5432/postgres
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app  # optional for dev

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile 
    container_name: frontend
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://localhost:3000
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/app  # optional for dev
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI
      - MLFLOW_DEFAULT_ARTIFACT_ROOT
    command: >
      mlflow server 
        --backend-store-uri $MLFLOW_BACKEND_STORE_URI 
        --default-artifact-root $MLFLOW_DEFAULT_ARTIFACT_ROOT
        --host 0.0.0.0
        --port 5000
    volumes:
      - ./mlflow_volume:/mlruns

  # train:
  #   build:
  #     context: ./backend
  #     dockerfile: train.Dockerfile 
  #   depends_on:
  #     - timescaledb
  #     - mlflow
  #     - db-init
  #   container_name: training
  #   volumes:
  #     - ./mlflow_volume:/mlruns
  #   # This will run train_pipeline.py once and then exit
  #   restart: "no"

  # inference:
  #   build:
  #     context: ./backend
  #     dockerfile: inference.Dockerfile  # or reuse train.Dockerfile + override CMD
  #   container_name: inference
  #   volumes:
  #     - ./mlflow_volume:/mlruns
  #   depends_on:
  #     - timescaledb
  #     - mlflow
  #     - db-init
  #   environment:
  #     DATABASE_URL: postgres://postgres:postgresso@timescaledb:5432/postgres
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  #     # If your inference code needs to see MLflow...
  #     MLFLOW_TRACKING_URI: http://mlflow:5000
  #   # We want this container to run once and exit:
  #   restart: "no"

volumes:
  timescaledb_data:
